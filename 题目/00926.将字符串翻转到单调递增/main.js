// 如果一个二进制字符串，是以一些 0（可能没有 0）后面跟着一些 1（也可能没有 1）的形式组成的，那么该字符串是 单调递增 的。
// 给你一个二进制字符串 s，你可以将任何 0 翻转为 1 或者将 1 翻转为 0 。
// 返回使 s 单调递增的最小翻转次数。1
// --------------------------------------------------

// 方法一

// 从头遍历，从第一个1开始0的数目和1的数目赛跑，
// 每次0的数目超过1的数目翻转前面的所有1，再找到下一个1从新计数，以此类推。
// 最后0的数目不超过1的数目翻转后面剩下的0。程序中只需要计数，不需要真实的翻转

/**
 * @param {string} s
 * @return {number}
 */
var minFlipsMonoIncr = function (s) {
  let result = 0;
  let num0 = 0,
    num1 = 0;

  for (let i = 0; i < s.length; i++) {
    s[i] === "0" ? num0++ : num1++; // 计算0和1的数目
    if (num0 > num1) {
      // 如果0的数目超过1的数目，说明翻转1时的翻转次数最少
      result += num1;
      num0 = 0;
      num1 = 0;
    }
  }

  result += num0; // 最后如果0的数目不超过1的数目，说明翻转0时的翻转次数最少
  return result;
};

// ----------------------------------------------------

// 方法二  动态规划
// https://juejin.cn/post/6951922898638471181

// 来源：力扣（LeetCode）
// 链接：https://leetcode.cn/problems/flip-string-to-monotone-increasing
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
